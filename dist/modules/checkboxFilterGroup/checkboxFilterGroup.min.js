"use strict";function CheckboxFilterGroupController(a){function b(b){var d=b.filterKey||c.filterKey,e=angular.copy(c.filter[d]||[]),f=e.indexOf(b.value);if(c.multicheck)-1===f?e.push(b.value):e.splice(f,1);else{var g=angular.copy(b.isChecked);c.fields.forEach(function(a){a.isChecked=!1}),b.isChecked=g,e=-1===f?[b.value]:[]}c.filter[d]=e,a(function(){c.onUpdate()&&c.onUpdate()(c.filter)})}var c=this;c.updateFilter=b}function CheckboxFilterGroupDirective(){return{restrict:"E",scope:{label:"@",fields:"=",filter:"=",filterKey:"@",multicheck:"=",onUpdate:"&"},template:['<div class="c2fo-ui-checkbox-filter-group">','   <div class="heading"><b>{{checkBoxFilterGroupCtrl.label}}</b></div>','   <div class="checkbox" ng-repeat="field in checkBoxFilterGroupCtrl.fields">',"       <label>",'           <input type="checkbox" ng-model="field.isChecked" ng-click="checkBoxFilterGroupCtrl.updateFilter(field)"/>',"           {{field.label}}","       </label>","   </div>","</div>"].join("").replace(/\s\s+/g,""),controller:"CheckboxFilterGroupController",controllerAs:"checkBoxFilterGroupCtrl",bindToController:!0}}module.exports=CheckboxFilterGroupController,CheckboxFilterGroupController.$inject=["$timeout"],describe("Checkbox Filter Group Controller",function(){beforeEach(module("c2fo.ui.modules.checkboxFilterGroup"));var a,b;beforeEach(inject(function(c){var d=c;b={},a=d("CheckboxFilterGroupController",{$scope:b}),a.filter={myKey:[]},a.fields=[{label:"Yes",value:"yes-value"},{label:"No",value:"no-value"}],a.filterKey="myKey",a.onUpdate=function(){return function(){return!0}}})),describe("updateFilter()",function(){it("should support optional onUpdate() parameter",function(){a.multicheck=!0,a.onUpdate=null,a.updateFilter(a.fields[0]),expect(a.onUpdate).toEqual(null)}),describe("multicheck parameter",function(){it("should support a true value",function(){a.multicheck=!0,a.fields[0].isChecked=!0,a.updateFilter(a.fields[0]),expect(a.filter).toEqual({myKey:["yes-value"]}),a.fields[1].isChecked=!0,a.updateFilter(a.fields[1]),expect(a.filter).toEqual({myKey:["yes-value","no-value"]}),a.fields[1].isChecked=!1,a.updateFilter(a.fields[1]),expect(a.filter).toEqual({myKey:["yes-value"]}),a.fields[0].isChecked=!1,a.updateFilter(a.fields[0]),expect(a.filter).toEqual({myKey:[]})}),it("should support a false value",function(){a.multicheck=!1,a.fields[0].isChecked=!0,a.updateFilter(a.fields[0]),expect(a.filter).toEqual({myKey:["yes-value"]}),a.fields[1].isChecked=!0,a.updateFilter(a.fields[1]),expect(a.filter).toEqual({myKey:["no-value"]}),expect(a.fields[0].isChecked).toEqual(!1),a.fields[1].isChecked=!1,a.updateFilter(a.fields[1]),expect(a.filter).toEqual({myKey:[]})})}),it("should support filterKey overrides from fields",function(){a.multicheck=!0,a.fields[0].isChecked=!0,a.fields[0].filterKey="customFilterKey",a.updateFilter(a.fields[0]),expect(a.filter).toEqual({myKey:[],customFilterKey:["yes-value"]}),a.fields[1].isChecked=!0,a.updateFilter(a.fields[1]),expect(a.filter).toEqual({myKey:["no-value"],customFilterKey:["yes-value"]}),a.fields[0].isChecked=!1,a.updateFilter(a.fields[0]),expect(a.filter).toEqual({myKey:["no-value"],customFilterKey:[]}),a.fields[1].isChecked=!1,a.updateFilter(a.fields[1]),expect(a.filter).toEqual({myKey:[],customFilterKey:[]})})})}),module.exports=CheckboxFilterGroupDirective,CheckboxFilterGroupDirective.$inject=[];
//# sourceMappingURL=checkboxFilterGroup.min.js.map